package diunipisocc.microTOM.parsers;

import java.io.File;

import java.io.FileReader;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.json.simple.JsonArray;
import org.json.simple.JsonObject;
import org.json.simple.Jsoner;

import diunipisocc.microTOM.graph.Edge;

/**
 * This class is designed for parsing "edges" elements of JSON file of service
 * mesh generated by Kiali, by implementing "parse()" method of
 * M2MinerJsonParser interface
 * 
 * @author javad khalili
 *
 */
public class EdgeParser implements M2MinerJsonParser<Edge> {

	@Override
	public List<Edge> parse(File jsonFile) {
		List<Edge> edges = null;

		try {
			edges = new ArrayList<>();

			// creating an object from JSON input file
			Object obj = Jsoner.deserialize(new FileReader(jsonFile));

			// Convert the object to JSON type
			JsonObject jsonObject = (JsonObject) obj;

			// Retrieve the 'elements' property
			JsonObject elements = (JsonObject) jsonObject.get("elements");

			// Getting the list of Edges in the file
			JsonArray Edges = (JsonArray) elements.get("edges");

			// Iterate through the edges in order to create edge java object
			Iterator<Object> iterator = Edges.iterator();
			while (iterator.hasNext()) {
				JsonObject eachEdge = (JsonObject) iterator.next();
				JsonObject edgeData = (JsonObject) eachEdge.get("data");
				Edge edge = new Edge(edgeData.get("id").toString(), edgeData.get("source").toString(),
						edgeData.get("target").toString());
				edges.add(edge);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		if (edges.isEmpty()) {
			System.err.println("No Edge has been identified in the JSON file!");
		}
		return edges;

	}

}
