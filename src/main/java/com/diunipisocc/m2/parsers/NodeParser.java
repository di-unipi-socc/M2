package com.diunipisocc.m2.parsers;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.json.simple.JsonArray;
import org.json.simple.JsonObject;
import org.json.simple.Jsoner;

import com.diunipisocc.m2.graph.Edge;
import com.diunipisocc.m2.graph.JsService;

/**
 * This class is designed to parse "node" elements of JSON file of service mesh
 * of the application generated by Kiali, by implementing "parse()" method of
 * M2MinerJsonParser interface
 * 
 * @author javad khalili
 *
 */
public class NodeParser implements M2MinerJsonParser<JsService> {

	@Override
	public List<JsService> parse(File jsonFile) {
		if (!(isServiceGraph(jsonFile))) {
			System.err.println("The input JSON graph data file must be of type 'service'!");
			System.exit(0);
		}

		List<JsService> services = null;

		try {
			services = new ArrayList<>();

			Object obj = Jsoner.deserialize(new FileReader(jsonFile));

			JsonObject jsonObject = (JsonObject) obj;

			JsonObject elements = (JsonObject) jsonObject.get("elements");

			// list of nodes in JSON file
			JsonArray nodes = (JsonArray) elements.get("nodes");

			Iterator<Object> iterator = nodes.iterator();
			while (iterator.hasNext()) {

				JsonObject eachNode = (JsonObject) iterator.next();

				JsonObject nodeData = (JsonObject) eachNode.get("data");

				String id = nodeData.get("id").toString();
				String serviceName;
				if (nodeData.get("service") != null) {
					serviceName = nodeData.get("service").toString();
				} else {
					serviceName = nodeData.get("workload").toString();
				}
				String nodeType = nodeData.get("nodeType").toString();

				JsService service = new JsService(id, serviceName, nodeType);
				if (nodeData.get("hasCB") != null) {
					service.setHasCB(true);
				}
				if (nodeData.get("hasVS") != null) {
					service.setHasVS(true);
				}

				services.add(service);

			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		if (services.isEmpty()) {
			System.err.println("No Service has been identified in the JSON file!");
		}
		System.out.println("-------------------------------------------------------------------------------");
		System.out.println("List of services in mesh!");
		System.out.println("-------------------------------------------------------------------------------");
		services.forEach(s -> {
			System.out.println("JsService -> " + s.getServiceName());
		});
		return services;

	}

	/**
	 * Checks the type of the graph data file
	 * 
	 * @param jsonFile
	 * @return
	 */
	private boolean isServiceGraph(File jsonFile) {
		BufferedReader br = null;
		try {
			br = new BufferedReader(new FileReader(jsonFile));
			String line = br.readLine();
			while (line != null) {

				if (line.contains("\"graphType\": \"service\"")) {
					br.close();
					return true;
				}
				line = br.readLine();
			}
			br.close();

		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}

		return false;
	}

	/**
	 * Identifies sink nodes of the graph of service mesh
	 * 
	 * @param services
	 * @param edges
	 * @return
	 */
	public List<JsService> findSinks(List<JsService> services, List<Edge> edges) {
		List<JsService> sinks = new ArrayList<>(services);
		for (Edge edge : edges) {
			JsService candidate = null;
			Iterator<JsService> iter = sinks.iterator();
			while (iter.hasNext()) {
				candidate = (JsService) iter.next();
				if (candidate.getServiceName().equals(edge.getSourceName())) {
					iter.remove();
				}
			}
		}
		return sinks;
	}
}
