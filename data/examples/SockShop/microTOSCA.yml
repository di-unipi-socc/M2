tosca_definitions_version: micro_tosca_yaml_1.2
description: Automatically generated microTOSCA specification of sock-shop
imports:
- micro: https://di-unipi-socc.github.io/microTOSCA/microTOSCA.yaml
topology_template:
  node_templates:
    catalogue.svc:
      type: micro.nodes.MessageRouter
      requirements:
      - interaction:
         node: catalogue

    rabbitmq.svc:
      type: micro.nodes.MessageRouter
      requirements:
      - interaction:
         node: rabbitmq

    user.svc:
      type: micro.nodes.MessageRouter
      requirements:
      - interaction:
         node: user

    user-db.svc:
      type: micro.nodes.MessageRouter
      requirements:
      - interaction:
         node: user-db

    orders.svc:
      type: micro.nodes.MessageRouter
      requirements:
      - interaction:
         node: orders

    session-db.svc:
      type: micro.nodes.MessageRouter
      requirements:
      - interaction:
         node: session-db

    orders-db.svc:
      type: micro.nodes.MessageRouter
      requirements:
      - interaction:
         node: orders-db

    payment.svc:
      type: micro.nodes.MessageRouter
      requirements:
      - interaction:
         node: payment

    catalogue-db.svc:
      type: micro.nodes.MessageRouter
      requirements:
      - interaction:
         node: catalogue-db

    carts.svc:
      type: micro.nodes.MessageRouter
      requirements:
      - interaction:
         node: carts

    front-end.svc:
      type: micro.nodes.MessageRouter
      requirements:
      - interaction:
         node: front-end

    shipping.svc:
      type: micro.nodes.MessageRouter
      requirements:
      - interaction:
         node: shipping

    carts-db.svc:
      type: micro.nodes.MessageRouter
      requirements:
      - interaction:
         node: carts-db

    queue-master.svc:
      type: micro.nodes.MessageRouter
      requirements:
      - interaction:
         node: queue-master

    shipping:
      type: micro.nodes.Service
      requirements:
      - interaction:
         node: rabbitmq.svc
         relationship: d
    carts:
      type: micro.nodes.Service
      requirements:
      - interaction:
         node: carts-db.svc
         relationship: d
    session-db:
      type: micro.nodes.Datastore

    catalogue-db:
      type: micro.nodes.Service

    payment:
      type: micro.nodes.Service

    front-end:
      type: micro.nodes.Service
      requirements:
      - interaction:
         node: session-db.svc
         relationship: d
      - interaction:
         node: user.svc
         relationship: d
      - interaction:
         node: carts.svc
         relationship: d
      - interaction:
         node: catalogue.svc
         relationship: d
      - interaction:
         node: orders.svc
         relationship: d
    user:
      type: micro.nodes.Service
      requirements:
      - interaction:
         node: user-db.svc
         relationship: d
    rabbitmq:
      type: micro.nodes.MessageBroker

    orders-db:
      type: micro.nodes.Datastore

    queue-master:
      type: micro.nodes.Service
      requirements:
      - interaction:
         node: rabbitmq.svc
         relationship: d
    carts-db:
      type: micro.nodes.Datastore

    user-db:
      type: micro.nodes.Service

    orders:
      type: micro.nodes.Service
      requirements:
      - interaction:
         node: user.svc
         relationship: d
      - interaction:
         node: carts.svc
         relationship: d
      - interaction:
         node: payment.svc
         relationship: d
      - interaction:
         node: shipping.svc
         relationship: d
      - interaction:
         node: orders-db.svc
         relationship: d
    catalogue:
      type: micro.nodes.Service
      requirements:
      - interaction:
         node: catalogue-db.svc
         relationship: d
  groups:
    edge:
      type: micro.groups.Edge
      members: [front-end.svc]
  relationship_templates:
    t:
      type: micro.relationships.InteractsWith
      properties:
        timeout: true
    c:
      type: micro.relationships.InteractsWith
      properties:
        circuit_breaker: true
    d:
      type: micro.relationships.InteractsWith
      properties:
        dynamic_discovery: true
    tc:
      type: micro.relationships.InteractsWith
      properties:
        timeout: true
        circuit_breaker: true
    td:
      type: micro.relationships.InteractsWith
      properties:
        timeout: true
        dynamic_discovery: true
    cd:
      type: micro.relationships.InteractsWith
      properties:
        circuit_breaker: true
        dynamic_discovery: true
    tcd:
      type: micro.relationships.InteractsWith
      properties:
        timeout: true
        circuit_breaker: true
        dynamic_discovery: true
